# -*- coding: utf-8 -*-
"""Bollinger Band Code + Other possible formulas

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1fpebUsJ0N75uGNkTvIyHQck00GRqSFGf
"""

import pandas as pd
import numpy as np
import math

#//CODE I FOUND ONLINE
import numpy as np
import pandas as pd
import pandas_datareader as pdr
import matplotlib.pyplot as plt

def get_sma(prices, rate):
    return prices.rolling(rate).mean()

def get_bollinger_bands(prices, rate=20):
    sma = get_sma(prices, rate)
    std = prices.rolling(rate).std()
    bollinger_up = sma + std * 2 # Calculate top band
    bollinger_down = sma - std * 2 # Calculate bottom band
    return bollinger_up, bollinger_down

symbol = 'AAPL'
df = pdr.DataReader(symbol, 'yahoo', '2014-07-01', '2015-07-01')
df.index = np.arange(df.shape[0])
closing_prices = df['Close']

bollinger_up, bollinger_down = get_bollinger_bands(closing_prices)

#<<THIS WILL BE BASED ON THE ORGANIZED DATA FROM PANDAS>>
#<<ALSO PLZ HELP WITH MAKING THIS A CONSTANTLY UPDATING CODE

#//BOLLINGER BAND CALCULATION
#day_stat=amount of keywords for a particular day
#stat_num=day of specific stat (likely to be used for graphs)
#n=number of days (essentially a date)
#period=smoothing period(dependent on smoothing)
#m=number standard deviations (usually 2 and is constant)
#TKW=np.array[empty until data is collected] // typical keywords (based on keywords in a smoothing period)

#//BOLLINGER BAND
#ref_SMA=TKW.rolling(period).mean()
#SD=TKW.rolling(period).std()
#bolu=ref_SMA+m*SD
#bold=ref_SMA-m*SD

#//BOLLINGER BAND MONITOR
#if {the amount of days updates or smth, for example 'stat_num>n'}:
  #for i in range(n,n+1):  //I'm not exactly sure how to write a program that constantly monitors the data, so modify the code when necessary
    #TKW.append(day_stat)
    #if day_stat<=bolu or day_stat>=bold:
      #period=period+1
    #n=n+1
